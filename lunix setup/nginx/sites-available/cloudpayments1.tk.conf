
# HTTP redirect
server {
    listen 80;
    listen [::]:80;

    server_name cloudpayments1.tk www.cloudpayments1.tk;
    return 301 https://cloudpayments1.tk$request_uri;
}

# subdomains redirect
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name www.cloudpayments1.tk;
    return 301 https://cloudpayments1.tk$request_uri;

    include snippets/ssl-certificate.conf;
    include snippets/ssl-params.conf;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name cloudpayments1.tk;


    include snippets/ssl-certificate.conf;
    include snippets/ssl-params.conf;
    # security
    #     include   snippets/DO_security.conf;

     # logging
    access_log              /var/log/nginx/cloudpayments1.tk.access.log;
    error_log               /var/log/nginx/cloudpayments1.tk.error.log warn;
#  тестирование rewrite
#     rewrite_log on;
#     error_log               /var/log/nginx/cloudpayments1.tk.error.log debug;

    # reverse proxy
    location /app2 {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;


        #  Проксирование WebSocket    для того чтобы проксируемый сервер узнал о намерении клиента сменить протокол на WebSocket, эти заголовки следует передать явно:
        # https://nginx.org/ru/docs/http/websocket.html
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';

        # https://www.8host.com/blog/osnovy-raboty-s-nginx-proksirovanie-balansirovka-nagruzki-buferizaciya-i-keshirovanie/#:~:text=%D0%A1%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D1%8B%2C%20%D0%BA%20%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%BC%20%D0%BE%D0%B1%D1%80%D0%B0%D1%89%D0%B0%D0%B5%D1%82%D1%81%D1%8F%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8,%D0%B4%D0%B8%D1%80%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%20%D0%B4%D0%BB%D1%8F%20%D0%BA%D0%B0%D0%B6%D0%B4%D0%BE%D0%B3%D0%BE%20%D1%82%D0%B8%D0%BF%D0%B0%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F.
        # В большинстве случаев нужно установить в заголовке Host переменную $host. Это наиболее гибкий вариант, который обычно обеспечивает точное заполнение заголовка.

        # $http_host equals always the HTTP_HOST request header.
        # $host equals $http_host, lowercase and without the port number (if present),
        #     except when HTTP_HOST is absent or is an empty value.
        #     In that case, $host equals the value of the server_name directive of the server which processed the request.
        proxy_set_header Host $host;


        #    proxy_cache_bypass     Задаёт условия, при которых ответ не будет браться из кэш
        proxy_cache_bypass $http_upgrade $cookie_nocache $http_cache_control $http_authorization;

        # The X-Forwarded-For (XFF) header is a de-facto standard header for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or a load balancer. When traffic is intercepted between clients and servers, server access logs contain the IP address of the proxy or load balancer only. To see the original IP address of the client, the X-Forwarded-For request header is used.
        #         proxy_set_header X-Forwarded-For $remote_addr;

        # https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
    }


    location / {
        root /var/www/cloudpayments1.tk/html;
        index index.html index.xml;
    }

    # additional config
#     include snippets/DO_general.conf;
}

